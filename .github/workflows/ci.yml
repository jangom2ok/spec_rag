name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, "feature/*"]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Run code formatting check
      run: |
        black --check --diff app/ tests/

    - name: Run linting
      run: |
        ruff check app/ tests/

    - name: Run type checking
      run: |
        mypy app/ --ignore-missing-imports

    - name: Run tests with coverage
      env:
        ENVIRONMENT: test
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install safety bandit

    - name: Run safety check
      run: |
        safety check --json || true

    - name: Run bandit security check
      run: |
        bandit -r app/ -f json || true

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t spec_rag:${{ github.sha }} .
        docker build -t spec_rag:latest .

    - name: Test Docker image
      run: |
        docker run --rm spec_rag:latest python -c "import app.main; print('Docker image works!')"

  deploy-staging:
    needs: [test, security-check, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging
      env:
        POSTGRES_USER: ${{ secrets.STAGING_POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ secrets.STAGING_POSTGRES_DB }}
      run: |
        echo "Deploying to staging environment..."
        # ここに実際のデプロイメントコマンドを追加

  deploy-production:
    needs: [test, security-check, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production
      env:
        POSTGRES_USER: ${{ secrets.PROD_POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ secrets.PROD_POSTGRES_DB }}
      run: |
        echo "Deploying to production environment..."
        # ここに実際のデプロイメントコマンドを追加
