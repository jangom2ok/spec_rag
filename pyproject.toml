[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "spec_rag"
version = "0.1.0"
description = "RAG System for System Development Documentation"
authors = [
    {name = "Development Team", email = "dev@example.com"},
]
dependencies = [
    "fastapi[all]>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",
    "aperturedb>=0.4.48",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    "numpy>=1.24.0",
    "PyJWT>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "psutil>=5.9.0",
    "email-validator>=2.0.0",
    "aiofiles>=23.2.0",
    "aiohttp>=3.9.0",
]
requires-python = ">=3.11"
readme = "README.md"
license = {file = "LICENSE"}

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "coverage>=7.3.2",
    "ruff>=0.1.6",
    "black>=23.11.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
    "safety>=2.3.5",
    "bandit[toml]>=1.7.5",
    "aiosqlite>=0.19.0",
]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit
]
ignore = [
    "E501",  # line too long (handled by black)
    "S101",  # use of assert detected
    "B008",  # do not perform function calls in argument defaults (FastAPI Depends is an exception)
]
exclude = [
    ".git",
    "__pycache__",
    "docs",
    ".venv",
    "venv",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # allow asserts in tests

# Black configuration
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.11"
# Basic configuration for gradual typing adoption
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Disable strict typing temporarily
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
check_untyped_defs = false
warn_return_any = false
no_implicit_optional = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Gradual typing - strict typing for specific modules
[[tool.mypy.overrides]]
module = "app.api.documents"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "app.models.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true

# External library compatibility
[[tool.mypy.overrides]]
module = "app.database.migration"
ignore_errors = true

# Temporarily ignore complex auth type issues
[[tool.mypy.overrides]]
module = "app.api.auth"
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "--strict-markers --strict-config --cov=app --cov-report=term-missing"
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "auth: marks tests that require authentication",
    "external: marks tests that require external services",
    "no_jwt_mock: disables JWT mocking for testing real JWT logic",
    "no_apikey_mock: disables API Key mocking for testing real API Key logic",
    "no_auth_middleware: disables authentication middleware for endpoint testing",
]
# テスト段階の設定
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

[tool.hatch.build.targets.wheel]
packages = ["app"]
